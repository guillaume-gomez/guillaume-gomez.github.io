{"version":3,"sources":["components/School.tsx","components/animations/FadeInAndGrowWhenVisible.tsx","views/Education.tsx","../../src/observe.ts","../../src/InView.tsx","../../src/useInView.tsx","components/SectionHeader.tsx","../node_modules/framer-motion/dist/es/animation/use-animation.js"],"names":["School","begin","end","diploma","detail","school","schoolUrl","location","srcImage","useTranslation","t","language","i18n","formatDate","date","locale","fr","enGB","format","className","href","loading","src","process","alt","FadeAndGrowInWhenVisible","children","controls","useAnimation","useInView","ref","inView","useEffect","start","motion","div","animate","initial","transition","duration","type","bounce","variants","visible","opacity","scale","hidden","Education","SectionHeader","text","FadeInAndGrowWhenVisible","Date","ObserverMap","RootIds","rootId","optionsToId","options","Object","key","root","observe","element","callback","id","instance","elements","observer","IntersectionObserver","entries","entry","thresholds","Array","createObserver","callbacks","isPlainChildren","props","InView","node","_unobserveCb","handleNode","undefined","handleChange","componentDidUpdate","prevProps","this","componentWillUnmount","observeNode","threshold","rootMargin","trackVisibility","delay","unobserve","render","as","tag","triggerOnce","skip","initialInView","React","state","setState","setRef","result","useConstant","animationControls","mount"],"mappings":"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","file":"static/js/11.4f70c0a1.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { format } from 'date-fns'\nimport { fr, enGB } from 'date-fns/locale'\n\nimport \"./School.css\";\n\ninterface SchoolInterface {\n  begin: Date;\n  end: Date;\n  location: string;\n  school: string;\n  schoolUrl?: string;\n  diploma: string;\n  detail?: string;\n  srcImage: string;\n}\n\nfunction School({begin, end, diploma, detail, school, schoolUrl, location, srcImage} : SchoolInterface) {\n  const { t, i18n: {language} } = useTranslation();\n  \n  function formatDate(date: Date) {\n    const locale = language === \"fr\" ? fr : enGB;\n    return format(date, t(\"date-format\"), { locale });\n  }\n\n  return (\n    <div className=\"school-container\">\n      <div className=\"school-image-container\">\n        <a href={schoolUrl}>\n          <img loading=\"lazy\" className=\"school-image\" src={`${process.env.PUBLIC_URL}/schools/${srcImage}`} alt=\"school-where-i-studied\"/>\n        </a>\n        <a href={schoolUrl}>\n          {school}\n        </a>\n      </div>\n      <div className=\"school-title-container\">\n        <div>{diploma}</div>\n        <em>{detail}</em>\n      </div>\n      <div className=\"school-detail-container\">\n        <em>{formatDate(begin)} - {formatDate(end)}</em>\n        <em>({location})</em>\n      </div>\n    </div>\n  );\n}\n\nexport default School;\n","import React, { useEffect } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport { motion, useAnimation } from \"framer-motion\";\n\ninterface FadeInWhenVisibleInterface {\n  children: React.ReactNode;\n  className?: string;\n}\n\nfunction FadeAndGrowInWhenVisible({ children, className } : FadeInWhenVisibleInterface) {\n  const controls = useAnimation();\n  const [ref, inView] = useInView();\n\n  useEffect(() => {\n    if (inView) {\n      controls.start(\"visible\");\n    }\n  }, [controls, inView]);\n\n  return (\n    <motion.div\n      ref={ref}\n      animate={controls}\n      className={className}\n      initial=\"hidden\"\n      transition={{ duration: 2.0,  type: \"spring\", bounce: 0.20 }}\n      variants={{\n        visible: { opacity: 1, scale: 1 },\n        hidden: { opacity: 0, scale: 0,},\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nexport default FadeAndGrowInWhenVisible;","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport School from \"../components/School\";\nimport SectionHeader from \"../components/SectionHeader\";\nimport FadeInAndGrowWhenVisible from \"../components/animations/FadeInAndGrowWhenVisible\";\n\n\nimport \"./Education.css\";\n\nfunction Education() {\n  const { t } = useTranslation();\n  return (\n    <div className=\"education-content\">\n      <SectionHeader text={t(\"education.education\")} />\n        <div className=\"education-container\">\n          <FadeInAndGrowWhenVisible>\n            <School\n              school={t(\"education.u_t_c.company\")}\n              schoolUrl=\"https://www.utc.fr/\"\n              location={t(\"education.u_t_c.location\")}\n              begin={new Date(2012,8,1)}\n              end={new Date(2015,1,1)}\n              diploma={t(\"education.u_t_c.job-title\")}\n              detail={t(\"education.u_t_c.bloc1\")}\n              srcImage={\"utc.jpg\"}\n              />\n            </FadeInAndGrowWhenVisible>\n            <FadeInAndGrowWhenVisible>\n              <School\n              school={t(\"education.i_u_t.company\")}\n              schoolUrl=\"https://iut.univ-amu.fr/sites/arles\"\n              location={t(\"education.i_u_t.location\")}\n              begin={new Date(2010,8,1)}\n              end={new Date(2012,5,1)}\n              diploma={t(\"education.i_u_t.job-title\")}\n              detail={t(\"education.i_u_t.bloc1\")}\n              srcImage={\"IUT.png\"}\n              />\n            </FadeInAndGrowWhenVisible>\n        </div>\n    </div>\n  );\n}\n\nexport default Education;\n","import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element, string> = new WeakMap();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import React from 'react';\nimport \"./SectionHeader.css\";\n\ninterface SectionHeaderInterface {\n  text: string;\n}\n\nfunction SectionHeader({text,} : SectionHeaderInterface) {\n  return (\n    <div className=\"section-header-container\">\n      <h2>{text}</h2>\n      <hr />\n    </div>\n  );\n}\n\nexport default SectionHeader;\n","import { useEffect } from 'react';\nimport { useConstant } from '../utils/use-constant.js';\nimport { animationControls } from './animation-controls.js';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * @library\n *\n * ```jsx\n * import * as React from 'react'\n * import { Frame, useAnimation } from 'framer'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <Frame animate={controls} />\n * }\n * ```\n *\n * @motion\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimation() {\n    var controls = useConstant(animationControls);\n    useEffect(controls.mount, []);\n    return controls;\n}\n\nexport { useAnimation };\n"],"sourceRoot":""}